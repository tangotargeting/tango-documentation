{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Tango Targeting.", 
            "title": "Welcome"
        }, 
        {
            "location": "/user-guide/engagement/what-is-a-campaign/", 
            "text": "At Tango Targeting we view a campaign is a process of presenting messages to users and collecting their \"responses\". Each campaign is composed of \na message\n, \na set of actions\n, \na set of rules\n for presenting the message \nand useful insights\n based on the aggregated user actions data.\n\n\nThe message\n\n\nProbably the most important part of a campaign is the message it sends to the users. This message is responsible, in most cases, for convincing the user to take action. Here are a few examples of messages that can be presented to the users.\n\n\n\n\n\n\n\n\nNaturally, there is a minimum required for each message and it can be implemented in a matter of seconds. However as previously stated, this is what your users will see, so we recommend investing some time in writing a good message. You can also checkout our [[Guide for writing impactful campaigns]].\n\n\nBelow are the elements of which a message is composed. \n\n\n\n\n\n\n\n\nElement\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTitle*\n\n\nA short title for your message. Maximum of 30 characters.\n\n\n\n\n\n\nBody\n\n\nYour actual message. Up to 110 characters.\n\n\n\n\n\n\nPrimary Action*\n\n\nA button with an associated action (open a link, make a call, etc.) that the user is expected to take.\n\n\n\n\n\n\nSecondary Action\n\n\nA secondary action the user is expected to take.\n\n\n\n\n\n\nImage\n\n\nAn image to enhance the power of the message. At least .png, .jpg, .gif supported. The height can vary to some extent.\n\n\n\n\n\n\nClose*\n\n\nProvided by default. It is not considered a user action but rather a dismiss event.\n\n\n\n\n\n\n\n\nThe elements marked with asterisk(*) are mandatory.\n\n\nActions\n\n\nSimply put, an action is what happens when the user taps or clicks a button that comes with a message. For instance, a campaign may be giving away a 30% discount for books bought on Amazon. Naturally, the primary action in this case, should take you to a web page were the user can view the discount code. The image below demonstrates how such an action can be created.\n\n\n\n\nAs seen in the image, there are several types of actions you can add to a message. All action types, except \nCUSTOM\n work out of the box. Here is what each of the does:\n\n\n\n\nURL\n - opens a web page in your default browser at the specified link\n\n\nCALL\n - opens the phone application with the specified number filled\n\n\nTEXT\n - opens the messaging application with the number filled (if provided)\n\n\nAPP\n - attempts to launch the application with the specified identifier (bundleId or package name)\n\n\nEMAIL\n - prepares an email in your email application with the specified email filled\n\n\nCUSTOM\n - custom actions that are handled at development time\n\n\n\n\nNote that sometimes there are more applications that can perform a specific task. For instance you may have several browsers installed on your device. If the user doesn't have one set as default, the device may present a list of browsers to choose from, when initiating an URL action. \n\n\nRules\n\n\nEvery campaign comes with a set of rules. Some rules represent limitations, such as the number of times a message can be displayed. Others describe filters, such as audiences or applications. We will cover the rules in the next section of this guide [[Creating a campaign]], where we will walk through the process of creating a campaign.", 
            "title": "What is a campaign?"
        }, 
        {
            "location": "/user-guide/engagement/what-is-a-campaign/#the-message", 
            "text": "Probably the most important part of a campaign is the message it sends to the users. This message is responsible, in most cases, for convincing the user to take action. Here are a few examples of messages that can be presented to the users.     Naturally, there is a minimum required for each message and it can be implemented in a matter of seconds. However as previously stated, this is what your users will see, so we recommend investing some time in writing a good message. You can also checkout our [[Guide for writing impactful campaigns]].  Below are the elements of which a message is composed.      Element  Description      Title*  A short title for your message. Maximum of 30 characters.    Body  Your actual message. Up to 110 characters.    Primary Action*  A button with an associated action (open a link, make a call, etc.) that the user is expected to take.    Secondary Action  A secondary action the user is expected to take.    Image  An image to enhance the power of the message. At least .png, .jpg, .gif supported. The height can vary to some extent.    Close*  Provided by default. It is not considered a user action but rather a dismiss event.     The elements marked with asterisk(*) are mandatory.", 
            "title": "The message"
        }, 
        {
            "location": "/user-guide/engagement/what-is-a-campaign/#actions", 
            "text": "Simply put, an action is what happens when the user taps or clicks a button that comes with a message. For instance, a campaign may be giving away a 30% discount for books bought on Amazon. Naturally, the primary action in this case, should take you to a web page were the user can view the discount code. The image below demonstrates how such an action can be created.   As seen in the image, there are several types of actions you can add to a message. All action types, except  CUSTOM  work out of the box. Here is what each of the does:   URL  - opens a web page in your default browser at the specified link  CALL  - opens the phone application with the specified number filled  TEXT  - opens the messaging application with the number filled (if provided)  APP  - attempts to launch the application with the specified identifier (bundleId or package name)  EMAIL  - prepares an email in your email application with the specified email filled  CUSTOM  - custom actions that are handled at development time   Note that sometimes there are more applications that can perform a specific task. For instance you may have several browsers installed on your device. If the user doesn't have one set as default, the device may present a list of browsers to choose from, when initiating an URL action.", 
            "title": "Actions"
        }, 
        {
            "location": "/user-guide/engagement/what-is-a-campaign/#rules", 
            "text": "Every campaign comes with a set of rules. Some rules represent limitations, such as the number of times a message can be displayed. Others describe filters, such as audiences or applications. We will cover the rules in the next section of this guide [[Creating a campaign]], where we will walk through the process of creating a campaign.", 
            "title": "Rules"
        }, 
        {
            "location": "/user-guide/engagement/creating-a-campaign/", 
            "text": "In this section we will walk you through the process of creating a campaign. \n\n\nSuppose Penguin Airlines has 50% discounts for all destinations on its 5\nth\n Anniversary Celebration. The goal of the campaign is to send a real time message (push notification) to all users to inform them about this special offer and allow them to quickly book flights.\n\n\nTo create a campaign the \nCampaigns\n tab in the left side menu must be selected. Once we are there we will press the blue button in the top right corner labeled \nNew Campaign\n.\n\n\nEnter your account\n\n\nIf you don't have an account yet, create one by starting a demo at \nthis URL\n. Then, to be able to test the campaigns, please install the \nAndroid\n or \niOS\n app on your phone and scan the QR code from your Tango account.\n\n\nType\n\n\nThe first step in creating a campaign is to determine its type. In the image below is represented what we see in the Tango Console. \n\n\n\n\nFollowing this section are details for each campaign type. For this scenario we will create a \nScheduled Campaign\n which is at the top of the list.\n\n\nDetails\n\n\nThe next thing we'll see is a screen were we will add some details about our campaign.\n\n\n\n\nApart from specifying the campaign name, this step is the only one that differs for each campaign type. Every campaign must have a name for easy identification. Thus, the name must be unique. We will call ours \n5\nth\n Anniversary Celebration Discount\n. \n\n\nWe chose to create a scheduled campaign, but now we are given three options. We said we want to send the our offer in real time, meaning we want a push notification, so we will choose to \nSend immediately\n. For more on real-time campaigns check [[Real-time]] campaigns page. The other two options are discussed in [[Specific dates]]  campaigns and [[Recurrent]] campaigns.\n\n\nContent (The Message)\n\n\nScrolling down and clicking the \nContinue\n button will take us to the screen where we will build the content presented to the user when the notification is received.\n\n\n\n\nLet's add a title the title \"Celebrate Penguin Airlines\" and a body that describes the offer. Also, we must add the primary action. In our case it will take the user to the home page of Penguin Airlines website where the user can start booking flights and find additional information about the offer. We could add a secondary action that could open another web page with other ways to benefit of the offer, like becoming a member.\n\n\nIt is also a good idea to add an image with the company logo (maybe with some fireworks in this case) for a stronger impact on the user. \n\n\nNow that we have our content built, lets move to the next step.\n\n\nSpecifics\n\n\n\n\nHere we have some rules for displaying the message, such as how many devices should receive the message or the maximum displays for each device, etc. Most probably, we will rarely use these rules but it is good to know them if we have some limitations for our campaign. For instance, if we had only 1000 discounts available, we could set the \nDevice limit\n to 1000.\n\n\nWe are happy with the default values as we want our campaign to reach as many customers as possible, so we will simply move on to the next step.\n\n\nAudience\n\n\n\n\nWe are almost done. Before sending the campaign we have to decide who should receive it. First of all, we may have several applications added to our account. We will choose the ones that are of interest to us. \n\n\nAfter selecting the the apps, we can filter further by adding tags. Tags are some strings defining a certain group of users (e.g.: \"student\", \"shopper\", etc.). We will ignore tags for now, but more information about them is in section [[What is a segment?]].\n\n\nFurther below are other filters that may e handy to us. For instance, we may want to send the campaign to LG devices only, for that we can check the name of the device in the \nName\n dropdown field. \n\n\nNote that only the filters that have actual data on the server will be displayed, for example if no iPhone device have yet used our app then no iPhone data will reach Tango servers and \niPhone\n will not appear in the \nName\n filter.\n\n\nGetting back to our scenario, lets suppose we don't want to filter anything, so wi will continue with finishing the creating our campaign. We'll hit \nContinue\n and see a screen with the overview of our campaign. If we missed something or want to make changes to the campaign we can do that by pressing the \nEdit\n button. Otherwise we will continue with submitting the campaign.\n\n\n\n\nSend/Activate\n\n\nOnce we have finished and submitted our campaign we will see it at the top of the campaigns list under \nDrafts\n.\n\n\n\n\nFor real-time campaigns we have the \"SEND NOW\" option. All the other campaigns have \"ACTIVATE\". The difference is that real-time campaigns are pushed immediately to all devices, whilst the others reach the devices when the devices are ready to synchronize with the server data. The latter ensures that all matching devices will receive the campaign.\n\n\nPressing \"SEND NOW\" will open a confirmation dialog which also informs us about the number of targeted devices and the option to \"PROCEED\" or \"POSTPONE\". When we are sure we want to send it we will hit \"PROCEED\". The next thing we would most likely want to do is to see the impact our campaign had: how many devices where reached, how many users saw the message and how many started booking a flight, etc. This information is available when clicking the the campaign in the \nIn Progress\n campaign list.\n\n\n\n\nMore information about campaign insights is covered in the [[Insights]] section.\n\n\nWe are done.", 
            "title": "Creating a campaign"
        }, 
        {
            "location": "/user-guide/engagement/creating-a-campaign/#enter-your-account", 
            "text": "If you don't have an account yet, create one by starting a demo at  this URL . Then, to be able to test the campaigns, please install the  Android  or  iOS  app on your phone and scan the QR code from your Tango account.", 
            "title": "Enter your account"
        }, 
        {
            "location": "/user-guide/engagement/creating-a-campaign/#type", 
            "text": "The first step in creating a campaign is to determine its type. In the image below is represented what we see in the Tango Console.    Following this section are details for each campaign type. For this scenario we will create a  Scheduled Campaign  which is at the top of the list.", 
            "title": "Type"
        }, 
        {
            "location": "/user-guide/engagement/creating-a-campaign/#details", 
            "text": "The next thing we'll see is a screen were we will add some details about our campaign.   Apart from specifying the campaign name, this step is the only one that differs for each campaign type. Every campaign must have a name for easy identification. Thus, the name must be unique. We will call ours  5 th  Anniversary Celebration Discount .   We chose to create a scheduled campaign, but now we are given three options. We said we want to send the our offer in real time, meaning we want a push notification, so we will choose to  Send immediately . For more on real-time campaigns check [[Real-time]] campaigns page. The other two options are discussed in [[Specific dates]]  campaigns and [[Recurrent]] campaigns.", 
            "title": "Details"
        }, 
        {
            "location": "/user-guide/engagement/creating-a-campaign/#content-the-message", 
            "text": "Scrolling down and clicking the  Continue  button will take us to the screen where we will build the content presented to the user when the notification is received.   Let's add a title the title \"Celebrate Penguin Airlines\" and a body that describes the offer. Also, we must add the primary action. In our case it will take the user to the home page of Penguin Airlines website where the user can start booking flights and find additional information about the offer. We could add a secondary action that could open another web page with other ways to benefit of the offer, like becoming a member.  It is also a good idea to add an image with the company logo (maybe with some fireworks in this case) for a stronger impact on the user.   Now that we have our content built, lets move to the next step.", 
            "title": "Content (The Message)"
        }, 
        {
            "location": "/user-guide/engagement/creating-a-campaign/#specifics", 
            "text": "Here we have some rules for displaying the message, such as how many devices should receive the message or the maximum displays for each device, etc. Most probably, we will rarely use these rules but it is good to know them if we have some limitations for our campaign. For instance, if we had only 1000 discounts available, we could set the  Device limit  to 1000.  We are happy with the default values as we want our campaign to reach as many customers as possible, so we will simply move on to the next step.", 
            "title": "Specifics"
        }, 
        {
            "location": "/user-guide/engagement/creating-a-campaign/#audience", 
            "text": "We are almost done. Before sending the campaign we have to decide who should receive it. First of all, we may have several applications added to our account. We will choose the ones that are of interest to us.   After selecting the the apps, we can filter further by adding tags. Tags are some strings defining a certain group of users (e.g.: \"student\", \"shopper\", etc.). We will ignore tags for now, but more information about them is in section [[What is a segment?]].  Further below are other filters that may e handy to us. For instance, we may want to send the campaign to LG devices only, for that we can check the name of the device in the  Name  dropdown field.   Note that only the filters that have actual data on the server will be displayed, for example if no iPhone device have yet used our app then no iPhone data will reach Tango servers and  iPhone  will not appear in the  Name  filter.  Getting back to our scenario, lets suppose we don't want to filter anything, so wi will continue with finishing the creating our campaign. We'll hit  Continue  and see a screen with the overview of our campaign. If we missed something or want to make changes to the campaign we can do that by pressing the  Edit  button. Otherwise we will continue with submitting the campaign.", 
            "title": "Audience"
        }, 
        {
            "location": "/user-guide/engagement/creating-a-campaign/#sendactivate", 
            "text": "Once we have finished and submitted our campaign we will see it at the top of the campaigns list under  Drafts .   For real-time campaigns we have the \"SEND NOW\" option. All the other campaigns have \"ACTIVATE\". The difference is that real-time campaigns are pushed immediately to all devices, whilst the others reach the devices when the devices are ready to synchronize with the server data. The latter ensures that all matching devices will receive the campaign.  Pressing \"SEND NOW\" will open a confirmation dialog which also informs us about the number of targeted devices and the option to \"PROCEED\" or \"POSTPONE\". When we are sure we want to send it we will hit \"PROCEED\". The next thing we would most likely want to do is to see the impact our campaign had: how many devices where reached, how many users saw the message and how many started booking a flight, etc. This information is available when clicking the the campaign in the  In Progress  campaign list.   More information about campaign insights is covered in the [[Insights]] section.  We are done.", 
            "title": "Send/Activate"
        }, 
        {
            "location": "/user-guide/engagement/scheduled-campaigns/", 
            "text": "Scheduled campaigns are campaigns that you want to act immediately or sometime in the future, be it today or several month from now, depending on the context. To cover all use cases we have three types of scheduled campaigns.\n\n\n\n\nReal-time\n\n\nSpecific dates\n\n\nRecurrent\n\n\n\n\nTo start creating  a scheduled campaign go to your Tango  account and select the \nCampaigns\n tab in the left side menu. Press on \"New Campaign\" and select a platform you want to create the campaign for. Then simply choose \nScheduled campaign\n.\n\n\n\n\nReal time\n\n\nThe concept behind real-time campaigns is quite simple as they are basically push notifications. One would normally want to create a real-time campaign when the content intended to reach the customer has a short immediate relevance and, if it sent later it may be outdated. Think of it like a simple notification.\n\n\nA real-time campaign is the simplest to create. Select the \nCampaignz\n tab in the left side menu, click the \nNew Campaign\n button, then choose \nScheduled campaign\n then in Step 2 select \nSend immediately\n. \n\n\n\n\nSpecific\n\n\nSpecific dates campaigns are useful when there are several dates relevant for the campaign. For example, a bookstore has special giveaways on Christmas day and on the first day of the new year. One way to inform the customers is to create two real-time campaigns on each of the two days. Suppose the content of the message is the same for both campaigns. A simpler way to achieve this is by creating a single campaign and adding those two dates. \n\n\nTo start creating a scheduled campaign go to your Tango account and select the \nCampaigns\n tab in the left side menu. Press on \nNew Campaign\n and select a platform you want to create the campaign for. Then simply choose \nScheduled Campaign\n. On the next page input the title of the campaign and choose \nSend on specific dates\n. A container will expand where you can add the dates.\n\n\n \n\n\nOnce all the needed dates are added follow the next steps covered in [[Creating a campaign]]. \n\n\nAfter the campaign is activated it reach the devices as soon as they synchronize with the server. The happens relatively fast but it is a good practice to have the campaign prepared with at least a day before the first added date. Contrary to real-time campaigns(push notifications) in the case the devices that are not yet connected to the internet will have time to do so before the campaign starts.\n\n\nRecurrent\n\n\nWe discussed in the previous section about when the Specific Dates campaigns are useful. Considering the same idea, let's say we want a campaign for a restaurant with a daily \nMenu of the Day\n for every week day. Suppose the campaign should run for a whole month. Real-time campaigns are obviously not so easy to implement as it would mean about 20 separate campaigns and we lose the benefit of having aggregated insights. The latter can be fixed with a Specific Dates campaign, but we still have to add 20 individual dates.\n\n\nWe can se the pattern for this scenario. Every day of the week from Monday to Friday repeated every week from a starting date until an ending date. This can be easily solved with a Recurrent campaign.\n\n\nTo start creating a recurrent campaign go to your Tango account and select the \nCampaigns\n tab in the left side menu. Press on \nNew Campaign\n and select a platform you want to create the campaign for. Then simply choose \nScheduled Campaign\n. On the next page input the title of the campaign and choose \nSend repeatedly\n. A container will expand where you can define the recurrence pattern.\n\n\n\n\nStart by setting the campaign's start and end by choosing dates for the \nStarting\n field at the top of the form and \nEnding\n at the bottom. There are three types of repetition that behave in the following manner:\n\n\n\n\nRepeat daily\n\n\nEach day is considered active, meaning;\n\n\nEvery day between \nStarting\n date and \nEnding\n date the user will be presented the campaign's message at the best time in the defined hour interval.\n\n\n\n\n\n\nRepeat weekly\n\n\nThe days with a blue background are chosen as active;\n\n\nOn each of the active days a the user will be presented the campaign's message;\n\n\nAt least one day of the week must be selected.\n\n\n\n\n\n\nRepeat monthly\n\n\nThe days with a blue background are chosen as active;\n\n\nOn each of the active days a the user will be presented the campaign's message;\n\n\nIf no day is selected, the current month day will be selected by default;\n\n\nThe repeating interval is one month;\n\n\nIf 31 is selected and the next month has 30 days, then the next month 30\nth\n will be the active day. This will preserve to the following month, meaning it will not come back to 31\nst\n again.", 
            "title": "Scheduled campaigns"
        }, 
        {
            "location": "/user-guide/engagement/scheduled-campaigns/#real-time", 
            "text": "The concept behind real-time campaigns is quite simple as they are basically push notifications. One would normally want to create a real-time campaign when the content intended to reach the customer has a short immediate relevance and, if it sent later it may be outdated. Think of it like a simple notification.  A real-time campaign is the simplest to create. Select the  Campaignz  tab in the left side menu, click the  New Campaign  button, then choose  Scheduled campaign  then in Step 2 select  Send immediately .", 
            "title": "Real time"
        }, 
        {
            "location": "/user-guide/engagement/scheduled-campaigns/#specific", 
            "text": "Specific dates campaigns are useful when there are several dates relevant for the campaign. For example, a bookstore has special giveaways on Christmas day and on the first day of the new year. One way to inform the customers is to create two real-time campaigns on each of the two days. Suppose the content of the message is the same for both campaigns. A simpler way to achieve this is by creating a single campaign and adding those two dates.   To start creating a scheduled campaign go to your Tango account and select the  Campaigns  tab in the left side menu. Press on  New Campaign  and select a platform you want to create the campaign for. Then simply choose  Scheduled Campaign . On the next page input the title of the campaign and choose  Send on specific dates . A container will expand where you can add the dates.     Once all the needed dates are added follow the next steps covered in [[Creating a campaign]].   After the campaign is activated it reach the devices as soon as they synchronize with the server. The happens relatively fast but it is a good practice to have the campaign prepared with at least a day before the first added date. Contrary to real-time campaigns(push notifications) in the case the devices that are not yet connected to the internet will have time to do so before the campaign starts.", 
            "title": "Specific"
        }, 
        {
            "location": "/user-guide/engagement/scheduled-campaigns/#recurrent", 
            "text": "We discussed in the previous section about when the Specific Dates campaigns are useful. Considering the same idea, let's say we want a campaign for a restaurant with a daily  Menu of the Day  for every week day. Suppose the campaign should run for a whole month. Real-time campaigns are obviously not so easy to implement as it would mean about 20 separate campaigns and we lose the benefit of having aggregated insights. The latter can be fixed with a Specific Dates campaign, but we still have to add 20 individual dates.  We can se the pattern for this scenario. Every day of the week from Monday to Friday repeated every week from a starting date until an ending date. This can be easily solved with a Recurrent campaign.  To start creating a recurrent campaign go to your Tango account and select the  Campaigns  tab in the left side menu. Press on  New Campaign  and select a platform you want to create the campaign for. Then simply choose  Scheduled Campaign . On the next page input the title of the campaign and choose  Send repeatedly . A container will expand where you can define the recurrence pattern.   Start by setting the campaign's start and end by choosing dates for the  Starting  field at the top of the form and  Ending  at the bottom. There are three types of repetition that behave in the following manner:   Repeat daily  Each day is considered active, meaning;  Every day between  Starting  date and  Ending  date the user will be presented the campaign's message at the best time in the defined hour interval.    Repeat weekly  The days with a blue background are chosen as active;  On each of the active days a the user will be presented the campaign's message;  At least one day of the week must be selected.    Repeat monthly  The days with a blue background are chosen as active;  On each of the active days a the user will be presented the campaign's message;  If no day is selected, the current month day will be selected by default;  The repeating interval is one month;  If 31 is selected and the next month has 30 days, then the next month 30 th  will be the active day. This will preserve to the following month, meaning it will not come back to 31 st  again.", 
            "title": "Recurrent"
        }, 
        {
            "location": "/user-guide/engagement/location-campaigns/", 
            "text": "Location campaigns are campaigns triggered when the device is in a specific place on the globe. There are three types of events that trigger a location campaign: entering the location, spending a certain amount of time in the location and exiting the location. \n\n\nSuppose a cinema wants to inform cinema goers about some movies. When entering the range of the cinema location, a campaign could inform the customer about the movies starting in the next half an hour. Or, after spending some time around the cinema it could show a message with the most appreciated movies currently running. Or, when leaving the location, it could announce the premiere of a movie. Each of these campaigns would have a button for booking movies.\n\n\nTo create a location campaign go to your Tango account and select the Campaigns tab in the left side menu. Press on \"New Campaign\" and select a platform you want to create the campaign for. Then simply choose \nLocation campaign\n.\n\n\nIn step 2, specify the start and end date.\n\n\n\n\nFurther below is a Google map on which the points of interest(locations) should be specified. A location is a blue filled circle with an additional surrounding circle defining the range of the active zone. Additionally, you can use the search bar if you can't find a place on the map.\n\n\n\n\nBelow the map is the list of all selected locations. On the right side for each item you can choose one of the three events that will trigger the campaign: \nENTER\n, \nLEAVE\n, \nSTAY\n. When choosing \nSTAY\n you will also have to specify the amount of time needed to pass after the ENTER event was triggered. We recommend choosing at least 1 minute, otherwise it doesn't differ too much from an ENTER trigger.\n\n\n\n\nOn the far left, each item has a spinner which specifies the range of the location. The location precision may vary from a device to another. Hence, it is a good idea to have some extra meters for better coverage.\n\n\nThe location list can be saved for later uses. Give it a descriptive name and load it the next time you intend to use it in a location campaign.", 
            "title": "Location campaigns"
        }, 
        {
            "location": "/user-guide/engagement/automated-campaigns/", 
            "text": "Sometimes having predefined types of campaigns is not enough. In some cases none of the campaign types apply for a desired use case. For instance, imagine a photo gallery application for which you want a campaign triggered after every ten viewed photos. None of the other campaigns apply for this case. To solve this we have created Automated Campaigns. Basically, an Automated Campaign comes with predefined trigger(which is a string), used to trigger the campaign whenever desired. \n\n\nTo start creating an automated campaign go to your Tango account and select the Campaigns tab in the left side menu. Press on New Campaign and select a platform you want to create the campaign for. Then simply choose Automated Campaign. On the next page input the title of the campaign. \n\n\nNext, set the period period the campaign should be active. In the following image the campaign is set to start today at 10:00 am and never end.\n\n\n\n\nThe last field is where the trigger should be defined. It should be an descriptive and intuitive short sentence. Once you're done with this step, press \nContinue\n and follow the next steps covered in [[Creating a campaign]].\n\n\n\n\nInfo\n\n\nAfter you finished creating the campaign some work must done development-wise, which is adding the code deciding when to trigger the campaign and actually triggering it through Tango Targeting SDK. For full instructions on how to do that, please follow the guides \nAndroid\n and \niOS\n.", 
            "title": "Automated campaigns"
        }, 
        {
            "location": "/user-guide/engagement/search-campaigns/", 
            "text": "Warning\n\n\nSearch Campaigns apply only for Android API 22 or less. Also, iOS is not supported.\n\n\n\n\nThere are cases when you want to interact with a customer based on what a search he or she made on the web. As a shoes retailer, you may want to present some offers when someone searched for \"men's shoes\" or \"women's shoes\". We made this possible with search based campaigns which rely on AdWords style keywords.\n\n\nTo start creating a recurrent campaign go to your Tango account and select the \nCampaigns\n tab in the left side menu. Press on \nNew Campaign\n and select as your platform. Then, simply choose \nSearch Campaign\n. \n\n\n\n\nAfter filling the campaign name, set the period the campaign should be active. Further on, specify the keywords that will trigger the campaign. The rules for keywords are as follows:\n\n\n\n\n+positive keywords\n - must be inputed with a leading \"+\" sign and represent keywords that must appear in the search phrase. Example: for the \n+men's\n keyword the search phrase \"men's shoes\" will match, whereas \"women's shoes\" will fail;\n\n\n-negative keywords\n - must be inputed with a leading \"-\" sign and represent keywords that must not be present in the search. Example: for the \n-men's\n keyword the search phrase \"men's and women's shoes\" will fail, whereas \"men's shoes\" will match;\n\n\n\"exact keywords\"\n - must be wrapped with double quotes and represent expressions that must be present in the search phrase exactly as specified. Example: for the \n\"men's shoes\"\n the search phrase \"men's blue shoes\" will fail, whereas \"men's shoes in Orlando\" will match.\n\n\n\n\nYou can save the keywords for later usage and if you already had defined Google AdWords in other projects and want to reuse them you can do so by clicking \nIMPORT ADWORDS\n.", 
            "title": "Search campaigns"
        }, 
        {
            "location": "/user-guide/segmentation/what-is-a-segment/", 
            "text": "Work in progress.", 
            "title": "What is a segment?"
        }, 
        {
            "location": "/user-guide/segmentation/supported-segments/", 
            "text": "Work in progress.", 
            "title": "Supported segments"
        }, 
        {
            "location": "/user-guide/insights/overview/", 
            "text": "Work in progress.", 
            "title": "Overview"
        }, 
        {
            "location": "/user-guide/insights/campaign-reports/", 
            "text": "Work in progress.", 
            "title": "Campaign reports"
        }, 
        {
            "location": "/developer-guide/android/installation/", 
            "text": "Important\n\n\nTango Targeting SDK requires at least Android 4.0.1.\n\n\n\n\nAdd the maven repository\n\n\nIn your app's root \nbuild.gradle\n file add the Tango Targeting maven repository.\n\n\nbuildscript\n \n{\n\n    \nrepositories\n \n{\n\n        \n...\n\n        \nmaven\n \n{\n \nurl\n \nhttps://maven.tangotargeting.com/repository/maven-public\n \n}\n\n        \n...\n\n    \n}\n\n\n}\n\n\n\nallprojects\n \n{\n\n    \nrepositories\n \n{\n\n        \n...\n\n        \nmaven\n \n{\n \nurl\n \nhttps://maven.tangotargeting.com/repository/maven-public\n \n}\n\n        \n...\n\n    \n}\n\n\n}\n\n\n\n\n\n\nAdd the Gradle dependency\n\n\nIn your app's root \nbuild.gradle\n file add the following dependency.\n\n\ncompile\n \n(\ncom.tangotargeting:tango:2.2.6\n)\n \n{\n\n    \ntransitive\n \n=\n \ntrue\n;\n\n\n}\n\n\n\n\n\n\nAdd your Tango API key\n\n\nIn \nAndroidManifest.xml\n, add the \nmeta-data\n containing your Tango API key:\n\n\napplication\n\n    ...\n    \nmeta-data\n\n        \nandroid:name=\ntango_api_key\n\n        \nandroid:value=\nyour-tango-sdk-key\n/\n\n    ...\n\n/application\n\n\n\n\n\n\n\n\nImportant\n\n\nTo find your Tango API KEY \nGo to Console \n and locate the card \nTango SDK Key\n\n\n\nthen hover it and click the copy icon on the right.\n\n\n\n\n\nSetup Firebase in your project\n\n\nTango uses FCM to send real-time campaigns to devices. \n\n\nIf you prefer not to use the Firebase Assistant, you can still add Firebase to your app using the Firebase console.\n\n\nTo add Firebase to your app you'll need a Firebase project and a Firebase configuration file for your app.\n\n\n\n\nCreate a Firebase project in the \nFirebase console\n, if you don't already have one. If you already have an existing Google project associated with your mobile app, click \nImport Google Project\n. Otherwise, click \nCreate New Project\n.\n\n\nClick \nAdd Firebase to your Android app\n and follow the setup steps. If you're importing an existing Google project, this may happen automatically and you can just \ndownload the config file\n.\n\n\nWhen prompted, enter your app's package name. It's important to enter the package name your app is using; this can only be set when you add an app to your Firebase project.\n\n\nAt the end, you'll download a \ngoogle-services.json\n file. You can download this file again at any time.\n\n\nIf you haven't done so already, copy this into your project's module folder, typically \napp/\n.\n\n\nFirst, add rules to your root-level \nbuild.gradle\n file, to include the google-services plugin: \n\n\n\n\nbuildscript\n \n{\n\n    \n// ...\n\n    \ndependencies\n \n{\n\n        \n// ...\n\n        \nclasspath\n \ncom.google.gms:google-services:3.1.0\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nThen, in your module Gradle file (usually the app/build.gradle), add the apply plugin line at the bottom of the file to enable the Gradle plugin:\n\n\n\n\napply\n \nplugin:\n \ncom.android.application\n\n\n\nandroid\n \n{\n\n  \n// ...\n\n\n}\n\n\n\ndependencies\n \n{\n\n  \n// ...\n\n  \ncompile\n \ncom.google.firebase:firebase-core:11.0.4\n\n\n  \n// Getting a \nCould not find\n error? Make sure you have\n\n  \n// the latest Google Repository in the Android SDK manager\n\n\n}\n\n\n\n// ADD THIS AT THE BOTTOM\n\n\napply\n \nplugin:\n \ncom.google.gms.google-services\n\n\n\n\n\n\n\n\nNote\n\n\nFor full instructions on how to add Firebase to an Android project \nclick here\n.\n\n\n\n\nAfter you have successfully integrated Firebase, copy the FCM \nServer key\n and \nSender Id\n from \nSettings/Cloud Messaging\n: \n\n\n\n\nThen go to Tango Console and add them to your app.\n\n\n\n\nHit the \nUpdate\n button.\n\n\nRequired permissions\n\n\nTango SDK relies on the following permissions:\n\n\n!-- Runtime permissions--\n\n\nuses-permission\n \nandroid:name=\nandroid.permission.READ_EXTERNAL_STORAGE\n/\n\n\nuses-permission\n \nandroid:name=\nandroid.permission.ACCESS_FINE_LOCATION\n/\n\n\n\n!--Normal permissions--\n\n\nuses-permission\n \nandroid:name=\ncom.android.browser.permission.READ_HISTORY_BOOKMARKS\n/\n\n\nuses-permission\n \nandroid:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission\n \nandroid:name=\nandroid.permission.RECEIVE_BOOT_COMPLETED\n/\n\n\n\n\n\n\nYou do not need to add these permissions to your Android Manifest file. However, if your \ntargetSdkVersion\n is higher than \n22\n you will need to request the \nandroid.permission.ACCESS_FINE_LOCATION\n and \nandroid.permission.READ_EXTERNAL_STORAGE\n permissions at runtime, whenever you think is most suitable for the user. \nHere\n is how to request a persmission at runtime.\n\n\n\n\nImportant\n\n\nThere are open-source libraries that can help you manage runtime permissions. Some examples include \nDexter\n or annotation based \nPermissionDispatcher\n.\n\n\n\n\nYou are ready to go!\n\n\nAt this point you should be able to use Tango with most of its functionality.\n\n\nTest\n\n\nTo test if the installation succeeded you should enter the Tango Targeting account then create and activate some campaigns. The easiest way is to create a real-time campaign but it pays off to test all campaigns as some of them have specific needs(like location permissions). \n\n\nIf a campaign doesn't trigger it is possible it did not reach the device yet as the synchronization happens approximately every ten minutes. To go around this, you could simply restart the application and a synchronization will immediately trigger. Note that real-time campaigns don't need any synchronization to work.", 
            "title": "Installation"
        }, 
        {
            "location": "/developer-guide/android/installation/#add-the-maven-repository", 
            "text": "In your app's root  build.gradle  file add the Tango Targeting maven repository.  buildscript   { \n     repositories   { \n         ... \n         maven   {   url   https://maven.tangotargeting.com/repository/maven-public   } \n         ... \n     }  }  allprojects   { \n     repositories   { \n         ... \n         maven   {   url   https://maven.tangotargeting.com/repository/maven-public   } \n         ... \n     }  }", 
            "title": "Add the maven repository"
        }, 
        {
            "location": "/developer-guide/android/installation/#add-the-gradle-dependency", 
            "text": "In your app's root  build.gradle  file add the following dependency.  compile   ( com.tangotargeting:tango:2.2.6 )   { \n     transitive   =   true ;  }", 
            "title": "Add the Gradle dependency"
        }, 
        {
            "location": "/developer-guide/android/installation/#add-your-tango-api-key", 
            "text": "In  AndroidManifest.xml , add the  meta-data  containing your Tango API key:  application \n    ...\n     meta-data \n         android:name= tango_api_key \n         android:value= your-tango-sdk-key / \n    ... /application    Important  To find your Tango API KEY  Go to Console   and locate the card  Tango SDK Key  \nthen hover it and click the copy icon on the right.", 
            "title": "Add your Tango API key"
        }, 
        {
            "location": "/developer-guide/android/installation/#setup-firebase-in-your-project", 
            "text": "Tango uses FCM to send real-time campaigns to devices.   If you prefer not to use the Firebase Assistant, you can still add Firebase to your app using the Firebase console.  To add Firebase to your app you'll need a Firebase project and a Firebase configuration file for your app.   Create a Firebase project in the  Firebase console , if you don't already have one. If you already have an existing Google project associated with your mobile app, click  Import Google Project . Otherwise, click  Create New Project .  Click  Add Firebase to your Android app  and follow the setup steps. If you're importing an existing Google project, this may happen automatically and you can just  download the config file .  When prompted, enter your app's package name. It's important to enter the package name your app is using; this can only be set when you add an app to your Firebase project.  At the end, you'll download a  google-services.json  file. You can download this file again at any time.  If you haven't done so already, copy this into your project's module folder, typically  app/ .  First, add rules to your root-level  build.gradle  file, to include the google-services plugin:    buildscript   { \n     // ... \n     dependencies   { \n         // ... \n         classpath   com.google.gms:google-services:3.1.0 \n     }  }    Then, in your module Gradle file (usually the app/build.gradle), add the apply plugin line at the bottom of the file to enable the Gradle plugin:   apply   plugin:   com.android.application  android   { \n   // ...  }  dependencies   { \n   // ... \n   compile   com.google.firebase:firebase-core:11.0.4 \n\n   // Getting a  Could not find  error? Make sure you have \n   // the latest Google Repository in the Android SDK manager  }  // ADD THIS AT THE BOTTOM  apply   plugin:   com.google.gms.google-services    Note  For full instructions on how to add Firebase to an Android project  click here .   After you have successfully integrated Firebase, copy the FCM  Server key  and  Sender Id  from  Settings/Cloud Messaging :    Then go to Tango Console and add them to your app.   Hit the  Update  button.", 
            "title": "Setup Firebase in your project"
        }, 
        {
            "location": "/developer-guide/android/installation/#required-permissions", 
            "text": "Tango SDK relies on the following permissions:  !-- Runtime permissions--  uses-permission   android:name= android.permission.READ_EXTERNAL_STORAGE /  uses-permission   android:name= android.permission.ACCESS_FINE_LOCATION /  !--Normal permissions--  uses-permission   android:name= com.android.browser.permission.READ_HISTORY_BOOKMARKS /  uses-permission   android:name= android.permission.INTERNET /  uses-permission   android:name= android.permission.RECEIVE_BOOT_COMPLETED /   You do not need to add these permissions to your Android Manifest file. However, if your  targetSdkVersion  is higher than  22  you will need to request the  android.permission.ACCESS_FINE_LOCATION  and  android.permission.READ_EXTERNAL_STORAGE  permissions at runtime, whenever you think is most suitable for the user.  Here  is how to request a persmission at runtime.   Important  There are open-source libraries that can help you manage runtime permissions. Some examples include  Dexter  or annotation based  PermissionDispatcher .", 
            "title": "Required permissions"
        }, 
        {
            "location": "/developer-guide/android/installation/#you-are-ready-to-go", 
            "text": "At this point you should be able to use Tango with most of its functionality.", 
            "title": "You are ready to go!"
        }, 
        {
            "location": "/developer-guide/android/installation/#test", 
            "text": "To test if the installation succeeded you should enter the Tango Targeting account then create and activate some campaigns. The easiest way is to create a real-time campaign but it pays off to test all campaigns as some of them have specific needs(like location permissions).   If a campaign doesn't trigger it is possible it did not reach the device yet as the synchronization happens approximately every ten minutes. To go around this, you could simply restart the application and a synchronization will immediately trigger. Note that real-time campaigns don't need any synchronization to work.", 
            "title": "Test"
        }, 
        {
            "location": "/developer-guide/android/handle-custom-actions/", 
            "text": "To handle custom \nactions\n on Android you have to create a BroadcastReceiver that will intercept the actions:\n\n\npublic\n \nclass\n \nCustomActionReceiver\n \nextends\n \nBroadcastReceiver\n \n{\n\n  \nprivate\n \nstatic\n \nfinal\n \nString\n \nKEY_CTA\n \n=\n \ncom.tangotargeting.intent.extra.CTA\n;\n\n\n  \n@Override\n \npublic\n \nvoid\n \nonReceive\n(\nContext\n \ncontext\n,\n \nIntent\n \nintent\n)\n \n{\n\n    \nString\n \naction\n \n=\n \nintent\n.\ngetStringExtra\n(\nKEY_CTA\n);\n\n    \nif\n \n(\naction\n \n!=\n \nnull\n)\n \n{\n\n      \n// Check what action was received and handle it\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\nthen declare it in the \nAndroidManifest.xml\n file:\n\n\napplication\n\n    ...\n    \nreceiver\n \nandroid:name=\n.CustomActionReceiver\n\n        \nintent-filter\n\n            \naction\n \nandroid:name=\ncom.tangotargeting.intent.action.CUSTOM_CTA\n/\n\n        \n/intent-filter\n\n    \n/receiver\n\n    ...\n\n/application", 
            "title": "Handle custom actions"
        }, 
        {
            "location": "/developer-guide/android/trigger-automated-campaigns/", 
            "text": "Triggering an automated campaign with Tango Targeting SDK is straightforward. All you have to do is to use the trigger associated with the campaign and make the call below wherever you think is appropriate in your code.\n\n\nTangoAutomation\n.\ntrigger\n(\nyour-campaign-trigger\n);\n\n\n\n\n\n\nThe result of the call is an int describing the result of the trigger call. If you want to do different things depending on the result, transform the code above like this:\n\n\nint\n \ntriggerResult\n \n=\n \nTangoAutomation\n.\ntrigger\n(\nyour-campaign-trigger\n);\n\n\n\nswitch\n(\ntriggerResult\n){\n\n    \ncase\n \nTangoAutomation\n.\nCAMPAIGN_NOT_STARTED\n:\n\n        \n// do stuff if the campaign has not started yet\n\n        \nbreak\n;\n\n    \ncase\n \nTangoAutomation\n.\nCAMPAIGN_NOT_FOUND\n:\n\n        \n// maybe the device is not yet synchronized with the latest campaigns or\n\n        \n// maybe the tag you provided is wrong \n\n        \nbreak\n;\n\n    \ncase\n \nTangoAutomation\n.\nCAMPAIGN_HAS_ENDED\n:\n\n        \n// do stuff if the campaign has ended\n\n        \nbreak\n;\n\n    \ncase\n \nTangoAutomation\n.\nCAMPAIGN_TRIGGERED\n:\n\n        \n// do stuff if the campaign triggered\n\n        \nbreak\n;\n\n\n}\n\n\n\n\n\n\n\n\nAttention\n\n\nTangoAutomation.trigger(String)\n must be explicitly called for retries. Meaning, if the campaign starts tomorrow but you called it today, your app is responsible for calling it again tomorrow.", 
            "title": "Trigger automated campaigns"
        }, 
        {
            "location": "/developer-guide/android/manage-tags/", 
            "text": "Tags are a useful way to target specific users. Every device that has an associated tag (segment) will receive campaigns that are also associated with that tag. \n\n\nTo manage the tags on Android devices we have provided three useful static methods:\n\n\n\n\nTango\n.\naddTags\n(\nSet\nString\n)\n - associates a set of tags with the current device;\n\n\nTango\n.\ndeleteTags\n(\nSet\nString\n)\n - removes a set of tags for the current device;\n\n\nTango\n.\ngetTags\n()\n - returns a set of tags associated with the device.\n\n\n\n\n\n\nNote\n\n\nIt is important to note the fact that tags can be associated with the device externally. However, \nTango\n.\ngetTags\n()\n will only return the tags managed locally with \nTango\n.\naddTags\n()\n and \nTango\n.\ndeleteTags\n()\n.", 
            "title": "Manage tags"
        }, 
        {
            "location": "/developer-guide/android/usage/", 
            "text": "Monitor the usage of the applications\n\n\n\n\nImportant\n\n\nTango Usage monitoring requires Android Lollipop 5.1 and a special permission needs to be requested.\n\n\n\n\n\n\nImportant\n\n\nWe strongly advice not to use this module, unless it is required by the business or app functionalities. \n\n\n\n\nTango will monitor all user activity and applications on the device. Each application event (Application moved to foreground, Application moved to background, installed applications) will be monitored and reported with the associated data.\n\n\nAdd the Gradle dependency\n\n\nIn your app's \nbuild.gradle\n file add the following dependency.\n\n\ncompile\n \n(\ncom.tangotargeting:tango-usage:2.2.6\n)\n \n{\n\n    \ntransitive\n \n=\n \ntrue\n;\n\n\n}\n\n\n\n\n\n\n\n\nImportant\n\n\nPrevious Tango installation steps are required. \n\n\n\n\nRequesting special permissions\n\n\nTango provides helper methods for managing special permissions. \n\n\nCheck for usage permission:\n\n\n    \nUsagePermissionUtil\n.\nusageStatsPermissionGranted\n(\ncontext\n);\n \n//returns boolean\n\n\n\n\n\n\nAdd the following code for requesting usage permission:\n\n\n    \nUsagePermissionUtil\n.\nopenGrantUsageStatsPermission\n(\ncontext\n);\n\n\n\n\n\n\nYou are ready to go!\n\n\nAt this point Tango will monitor and report applications usage stats.", 
            "title": "Monitor applications usage (Advanced)"
        }, 
        {
            "location": "/developer-guide/android/usage/#monitor-the-usage-of-the-applications", 
            "text": "Important  Tango Usage monitoring requires Android Lollipop 5.1 and a special permission needs to be requested.    Important  We strongly advice not to use this module, unless it is required by the business or app functionalities.    Tango will monitor all user activity and applications on the device. Each application event (Application moved to foreground, Application moved to background, installed applications) will be monitored and reported with the associated data.", 
            "title": "Monitor the usage of the applications"
        }, 
        {
            "location": "/developer-guide/android/usage/#add-the-gradle-dependency", 
            "text": "In your app's  build.gradle  file add the following dependency.  compile   ( com.tangotargeting:tango-usage:2.2.6 )   { \n     transitive   =   true ;  }    Important  Previous Tango installation steps are required.", 
            "title": "Add the Gradle dependency"
        }, 
        {
            "location": "/developer-guide/android/usage/#requesting-special-permissions", 
            "text": "Tango provides helper methods for managing special permissions.   Check for usage permission:       UsagePermissionUtil . usageStatsPermissionGranted ( context );   //returns boolean   Add the following code for requesting usage permission:       UsagePermissionUtil . openGrantUsageStatsPermission ( context );", 
            "title": "Requesting special permissions"
        }, 
        {
            "location": "/developer-guide/android/usage/#you-are-ready-to-go", 
            "text": "At this point Tango will monitor and report applications usage stats.", 
            "title": "You are ready to go!"
        }, 
        {
            "location": "/developer-guide/ios/installation/", 
            "text": "Requirements\n\n\n\n\niOS 9.0+ for Tango framework only\n\n\niOS 10.0+ if you use both Tango and TangoRichNotification framework\n\n\nXcode 8.1+\n\n\nSwift 3.2+\n\n\n\n\nInstall with CocoaPods\n\n\nCocoaPods is a dependency manager, which automates and simplifies the process of using 3\nrd\n-party libraries in your projects. See the \nGetting Started\n guide for more information. You can install it with the following terminal command:\n\n\n$ gem install cocoapods\n\n\n\n\n\nAfter installing go to your project directory and type this commad:\n\n\n$ pod init\n\n\n\n\n\nIn project folder it will appear a file called Podfile. Open it and integrate Tango by typing:\n\n\ntarget \nTargetName\n do\n  use_frameworks!\n  pod \nTango\n, \n~\n 1.0.14\n\nend\n\n\n\n\n\nAfter filling the Podfile save it and run the following command in the Terminal:\n\n\n$ pod install\n\n\n\n\n\nClose your project, go to your project location on disk and open the workspace the newly created \n.xcworkspace\n file inside your project directory. Continue by reading the \nPrepare and initialize\n guide.", 
            "title": "Installation"
        }, 
        {
            "location": "/developer-guide/ios/installation/#requirements", 
            "text": "iOS 9.0+ for Tango framework only  iOS 10.0+ if you use both Tango and TangoRichNotification framework  Xcode 8.1+  Swift 3.2+", 
            "title": "Requirements"
        }, 
        {
            "location": "/developer-guide/ios/installation/#install-with-cocoapods", 
            "text": "CocoaPods is a dependency manager, which automates and simplifies the process of using 3 rd -party libraries in your projects. See the  Getting Started  guide for more information. You can install it with the following terminal command:  $ gem install cocoapods  After installing go to your project directory and type this commad:  $ pod init  In project folder it will appear a file called Podfile. Open it and integrate Tango by typing:  target  TargetName  do\n  use_frameworks!\n  pod  Tango ,  ~  1.0.14 \nend  After filling the Podfile save it and run the following command in the Terminal:  $ pod install  Close your project, go to your project location on disk and open the workspace the newly created  .xcworkspace  file inside your project directory. Continue by reading the  Prepare and initialize  guide.", 
            "title": "Install with CocoaPods"
        }, 
        {
            "location": "/developer-guide/ios/prepare-and-initialize/", 
            "text": "Please follow the steps bellow to integrate Tango into your project:\n\n\nTango framework\n\n\nOpen your project's AppDelegate file and import the Tango framework.\n\n\n\n                \n\n                    \n        \n\n            \n        \n\n            \nSwift\n\n        \n\n    \n        \n\n            \nObjective-C\n\n        \n\n    \n        \n\n    \n        \n\n            \n        \n\n            \nimport\n \nTango\n\n\nimport\n \nUserNotifications\n\n\n\n\n        \n\n    \n        \n\n            \n#import \nTango/Tango-Swift.h\n\n\n#import \nTango/Tango.h\n\n\n#import \nUserNotifications/UserNotifications.h\n\n\n\n\n        \n\n    \n        \n\n    \n                \n\n                    \n\n\nThe \nUNUserNotificationCenterDelegate\n protocol defines methods for responding to actionable notifications. So, to respond to the action, let\ns have \nAppDelegate\n implement the \nUNUserNotificationCenterDelegate\n protocol:\n\n\n\n                \n\n                    \n        \n\n            \n        \n\n            \nSwift\n\n        \n\n    \n        \n\n            \nObjective-C\n\n        \n\n    \n        \n\n    \n        \n\n            \n        \n\n            \nclass\n \nAppDelegate\n:\n \nUIResponder\n,\n \nUIApplicationDelegate\n,\n \nUNUserNotificationCenterDelegate\n \n{}\n\n\n\n\n        \n\n    \n        \n\n            \n@interface\n \nAppDelegate\n : \nUIResponder\n \nUIApplicationDelegate\n,\n \nUNUserNotificationCenterDelegate\n\n\n\n\n        \n\n    \n        \n\n    \n                \n\n                    \n\n\nIn the \ndidFinishLaunchingWithOptions\n, setup notification delegate and initialize the Tango Targeting SDK with your Tango SDK key by calling \nTango.initialize()\n.\n\n\n\n                \n\n                    \n        \n\n            \n        \n\n            \nSwift\n\n        \n\n    \n        \n\n            \nObjective-C\n\n        \n\n    \n        \n\n    \n        \n\n            \n        \n\n            \nUNUserNotificationCenter\n.\ncurrent\n().\ndelegate\n \n=\n \nself\n\n\n\n// Initialize with API key\n\n\nTango\n.\ninitialize\n(\ntango\n:\n \nyour-tango-sdk-key\n)\n\n\n\n\n        \n\n    \n        \n\n            \nUNUserNotificationCenter\n \n*\ncenter\n \n=\n \n[\nUNUserNotificationCenter\n \ncurrentNotificationCenter\n];\n\n\ncenter\n.\ndelegate\n \n=\n \nself\n;\n\n\n\n[\nTango\n \ninitializeWithTango\n:\n@\nyour-tango-sdk-key\n];\n\n\n\n\n        \n\n    \n        \n\n    \n                \n\n                    \n\n\n\n\nImportant\n\n\nTo find your Tango API KEY \nGo to Console \n and locate the card \nTango SDK Key\n, then hover it and click the copy icon on the right side.\n\n\n\n\n\nAfter that you should implement the following delegate methods.\n\n\n\n                \n\n                    \n        \n\n            \n        \n\n            \nSwift\n\n        \n\n    \n        \n\n            \nObjective-C\n\n        \n\n    \n        \n\n    \n        \n\n            \n        \n\n            \nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ndidReceiveRemoteNotification\n \nuserInfo\n:\n \n[\nAnyHashable\n \n:\n \nAny\n],\n \nfetchCompletionHandler\n \ncompletionHandler\n:\n \n@\nescaping\n \n(\nUIBackgroundFetchResult\n)\n \n-\n \nVoid\n)\n \n{\n\n    \nTango\n.\napplication\n(\napplication\n,\n \ndidReceiveRemoteNotification\n:\n \nuserInfo\n)\n\n\n}\n\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ndidRegisterForRemoteNotificationsWithDeviceToken\n \ndeviceToken\n:\n \nData\n)\n \n{\n\n    \nTango\n.\napplication\n(\napplication\n,\n \ndidRegisterForRemoteNotificationsWithDeviceToken\n:\n \ndeviceToken\n)\n\n\n}\n\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ndidFailToRegisterForRemoteNotificationsWithError\n \nerror\n:\n \nError\n)\n \n{\n\n    \nTango\n.\napplication\n(\napplication\n,\n \ndidFailToRegisterForRemoteNotificationsWithError\n:\n \nerror\n)\n\n\n}\n\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ndidReceiveRemoteNotification\n \nuserInfo\n:\n \n[\nAnyHashable\n \n:\n \nAny\n])\n \n{\n\n    \nTango\n.\napplication\n(\napplication\n,\n \ndidReceiveRemoteNotification\n:\n \nuserInfo\n)\n\n\n}\n\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ndidRegister\n \nnotificationSettings\n:\n \nUIUserNotificationSettings\n)\n \n{\n\n    \nTango\n.\napplication\n(\napplication\n,\n \ndidRegister\n:\n \nnotificationSettings\n)\n\n\n}\n\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ndidReceive\n \nnotification\n:\n \nUILocalNotification\n)\n \n{\n\n    \nTango\n.\napplication\n(\napplication\n,\n \ndidReceive\n:\n \nnotification\n)\n\n\n}\n\n\n\n\n        \n\n    \n        \n\n            \n-\n \n(\nvoid\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ndidReceiveRemoteNotification:\n(\nnonnull\n \nNSDictionary\n \n*\n)\nuserInfo\n\n\n{\n\n    \n[\nTango\n \napplication\n:\napplication\n \ndidReceiveRemoteNotification\n:\nuserInfo\n];\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ndidRegisterForRemoteNotificationsWithDeviceToken:\n(\nnonnull\n \nNSData\n \n*\n)\ndeviceToken\n\n\n{\n\n    \n[\nTango\n \napplication\n:\napplication\n \ndidRegisterForRemoteNotificationsWithDeviceToken\n:\ndeviceToken\n];\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ndidFailToRegisterForRemoteNotificationsWithError:\n(\nnonnull\n \nNSError\n \n*\n)\nerror\n\n\n{\n\n    \n[\nTango\n \napplication\n:\napplication\n \ndidFailToRegisterForRemoteNotificationsWithError\n:\nerror\n];\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ndidReceiveRemoteNotification:\n(\nnonnull\n \nNSDictionary\n \n*\n)\nuserInfo\n \nfetchCompletionHandler:\n(\nnonnull\n \nvoid\n \n(\n^\n)(\nUIBackgroundFetchResult\n))\ncompletionHandler\n\n\n{\n\n    \n[\nTango\n \napplication\n:\napplication\n \ndidReceiveRemoteNotification\n:\nuserInfo\n];\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ndidRegisterUserNotificationSettings:\n(\nnonnull\n \nUIUserNotificationSettings\n \n*\n)\nnotificationSettings\n\n\n{\n\n    \n[\nTango\n \napplication\n:\napplication\n \ndidRegister\n:\nnotificationSettings\n];\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ndidReceiveLocalNotification:\n(\nUILocalNotification\n \n*\n)\nnotification\n\n\n{\n\n    \n[\nTango\n \napplication\n:\napplication\n \ndidReceive\n:\nnotification\n];\n\n\n}\n\n\n\n\n        \n\n    \n        \n\n    \n                \n\n                    \n\n\nFor \niOS 10\n you should also add:\n\n\n\n                \n\n                    \n        \n\n            \n        \n\n            \nSwift\n\n        \n\n    \n        \n\n            \nObjective-C\n\n        \n\n    \n        \n\n    \n        \n\n            \n        \n\n            \n// \nMARK:\n UNUserNotificationCenterDelegate Methods\n\n\n\n@\navailable\n(\niOS\n \n10.0\n,\n \n*\n)\n\n\nfunc\n \nuserNotificationCenter\n(\n_\n \ncenter\n:\n \nUNUserNotificationCenter\n,\n \ndidReceive\n \nresponse\n:\n \nUNNotificationResponse\n,\n \nwithCompletionHandler\n \ncompletionHandler\n:\n \n@\nescaping\n \n()\n \n-\n \nVoid\n)\n \n{\n\n    \nTango\n.\nuserNotificationCenter\n(\ncenter\n,\n \ndidReceive\n:\n \nresponse\n,\n \nwithCompletionHandler\n:\n \ncompletionHandler\n)\n\n\n}\n\n\n\n@\navailable\n(\niOS\n \n10.0\n,\n \n*\n)\n\n\nfunc\n \nuserNotificationCenter\n(\n_\n \ncenter\n:\n \nUNUserNotificationCenter\n,\n \nwillPresent\n \nnotification\n:\n \nUNNotification\n,\n \nwithCompletionHandler\n \ncompletionHandler\n:\n \n@\nescaping\n \n(\nUNNotificationPresentationOptions\n)\n \n-\n \nVoid\n)\n \n{\n\n    \nTango\n.\nuserNotificationCenter\n(\ncenter\n,\n \nwillPresent\n:\n \nnotification\n,\n \nwithCompletionHandler\n:\n \ncompletionHandler\n)\n\n\n}\n\n\n\n\n        \n\n    \n        \n\n            \n// MARK: UNUserNotificationCenterDelegate Methods\n\n\n\n-\n \n(\nvoid\n)\nuserNotificationCenter:\n(\nUNUserNotificationCenter\n \n*\n)\ncenter\n \nwillPresentNotification:\n(\nUNNotification\n \n*\n)\nnotification\n \nwithCompletionHandler:\n(\nvoid\n \n(\n^\n)(\nUNNotificationPresentationOptions\n \noptions\n))\ncompletionHandler\n\n\n{\n\n    \n[\nTango\n \nuserNotificationCenter\n:\ncenter\n \nwillPresent\n:\nnotification\n \nwithCompletionHandler\n:\ncompletionHandler\n];\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\nuserNotificationCenter:\n(\nUNUserNotificationCenter\n \n*\n)\ncenter\n \ndidReceiveNotificationResponse:\n(\nUNNotificationResponse\n \n*\n)\nresponse\n \nwithCompletionHandler:\n(\nvoid\n(\n^\n)(\nvoid\n))\ncompletionHandler\n\n\n{\n\n    \n[\nTango\n \nuserNotificationCenter\n:\ncenter\n \ndidReceive\n:\nresponse\n \nwithCompletionHandler\n:\ncompletionHandler\n];\n\n\n}\n\n\n\n\n        \n\n    \n        \n\n    \n                \n\n                    \n\n\n\n\nLocation tracking\n\n\nIf you are going to use a location campaign you need to add in your \nplist\n the following key: \nNSLocationAlwaysUsageDescription\n.", 
            "title": "Prepare and initialize"
        }, 
        {
            "location": "/developer-guide/ios/prepare-and-initialize/#tango-framework", 
            "text": "Open your project's AppDelegate file and import the Tango framework.  \n                 \n                    \n         \n            \n         \n             Swift \n         \n    \n         \n             Objective-C \n         \n    \n         \n    \n         \n            \n         \n             import   Tango  import   UserNotifications  \n\n         \n    \n         \n             #import  Tango/Tango-Swift.h  #import  Tango/Tango.h  #import  UserNotifications/UserNotifications.h  \n\n         \n    \n         \n    \n                 \n                      The  UNUserNotificationCenterDelegate  protocol defines methods for responding to actionable notifications. So, to respond to the action, let s have  AppDelegate  implement the  UNUserNotificationCenterDelegate  protocol:  \n                 \n                    \n         \n            \n         \n             Swift \n         \n    \n         \n             Objective-C \n         \n    \n         \n    \n         \n            \n         \n             class   AppDelegate :   UIResponder ,   UIApplicationDelegate ,   UNUserNotificationCenterDelegate   {}  \n\n         \n    \n         \n             @interface   AppDelegate  :  UIResponder   UIApplicationDelegate ,   UNUserNotificationCenterDelegate  \n\n         \n    \n         \n    \n                 \n                      In the  didFinishLaunchingWithOptions , setup notification delegate and initialize the Tango Targeting SDK with your Tango SDK key by calling  Tango.initialize() .  \n                 \n                    \n         \n            \n         \n             Swift \n         \n    \n         \n             Objective-C \n         \n    \n         \n    \n         \n            \n         \n             UNUserNotificationCenter . current (). delegate   =   self  // Initialize with API key  Tango . initialize ( tango :   your-tango-sdk-key )  \n\n         \n    \n         \n             UNUserNotificationCenter   * center   =   [ UNUserNotificationCenter   currentNotificationCenter ];  center . delegate   =   self ;  [ Tango   initializeWithTango : @ your-tango-sdk-key ];  \n\n         \n    \n         \n    \n                 \n                       Important  To find your Tango API KEY  Go to Console   and locate the card  Tango SDK Key , then hover it and click the copy icon on the right side.   After that you should implement the following delegate methods.  \n                 \n                    \n         \n            \n         \n             Swift \n         \n    \n         \n             Objective-C \n         \n    \n         \n    \n         \n            \n         \n             func   application ( _   application :   UIApplication ,   didReceiveRemoteNotification   userInfo :   [ AnyHashable   :   Any ],   fetchCompletionHandler   completionHandler :   @ escaping   ( UIBackgroundFetchResult )   -   Void )   { \n     Tango . application ( application ,   didReceiveRemoteNotification :   userInfo )  }  func   application ( _   application :   UIApplication ,   didRegisterForRemoteNotificationsWithDeviceToken   deviceToken :   Data )   { \n     Tango . application ( application ,   didRegisterForRemoteNotificationsWithDeviceToken :   deviceToken )  }  func   application ( _   application :   UIApplication ,   didFailToRegisterForRemoteNotificationsWithError   error :   Error )   { \n     Tango . application ( application ,   didFailToRegisterForRemoteNotificationsWithError :   error )  }  func   application ( _   application :   UIApplication ,   didReceiveRemoteNotification   userInfo :   [ AnyHashable   :   Any ])   { \n     Tango . application ( application ,   didReceiveRemoteNotification :   userInfo )  }  func   application ( _   application :   UIApplication ,   didRegister   notificationSettings :   UIUserNotificationSettings )   { \n     Tango . application ( application ,   didRegister :   notificationSettings )  }  func   application ( _   application :   UIApplication ,   didReceive   notification :   UILocalNotification )   { \n     Tango . application ( application ,   didReceive :   notification )  }  \n\n         \n    \n         \n             -   ( void ) application: ( UIApplication   * ) application   didReceiveRemoteNotification: ( nonnull   NSDictionary   * ) userInfo  { \n     [ Tango   application : application   didReceiveRemoteNotification : userInfo ];  }  -   ( void ) application: ( UIApplication   * ) application   didRegisterForRemoteNotificationsWithDeviceToken: ( nonnull   NSData   * ) deviceToken  { \n     [ Tango   application : application   didRegisterForRemoteNotificationsWithDeviceToken : deviceToken ];  }  -   ( void ) application: ( UIApplication   * ) application   didFailToRegisterForRemoteNotificationsWithError: ( nonnull   NSError   * ) error  { \n     [ Tango   application : application   didFailToRegisterForRemoteNotificationsWithError : error ];  }  -   ( void ) application: ( UIApplication   * ) application   didReceiveRemoteNotification: ( nonnull   NSDictionary   * ) userInfo   fetchCompletionHandler: ( nonnull   void   ( ^ )( UIBackgroundFetchResult )) completionHandler  { \n     [ Tango   application : application   didReceiveRemoteNotification : userInfo ];  }  -   ( void ) application: ( UIApplication   * ) application   didRegisterUserNotificationSettings: ( nonnull   UIUserNotificationSettings   * ) notificationSettings  { \n     [ Tango   application : application   didRegister : notificationSettings ];  }  -   ( void ) application: ( UIApplication   * ) application   didReceiveLocalNotification: ( UILocalNotification   * ) notification  { \n     [ Tango   application : application   didReceive : notification ];  }  \n\n         \n    \n         \n    \n                 \n                      For  iOS 10  you should also add:  \n                 \n                    \n         \n            \n         \n             Swift \n         \n    \n         \n             Objective-C \n         \n    \n         \n    \n         \n            \n         \n             //  MARK:  UNUserNotificationCenterDelegate Methods  @ available ( iOS   10.0 ,   * )  func   userNotificationCenter ( _   center :   UNUserNotificationCenter ,   didReceive   response :   UNNotificationResponse ,   withCompletionHandler   completionHandler :   @ escaping   ()   -   Void )   { \n     Tango . userNotificationCenter ( center ,   didReceive :   response ,   withCompletionHandler :   completionHandler )  }  @ available ( iOS   10.0 ,   * )  func   userNotificationCenter ( _   center :   UNUserNotificationCenter ,   willPresent   notification :   UNNotification ,   withCompletionHandler   completionHandler :   @ escaping   ( UNNotificationPresentationOptions )   -   Void )   { \n     Tango . userNotificationCenter ( center ,   willPresent :   notification ,   withCompletionHandler :   completionHandler )  }  \n\n         \n    \n         \n             // MARK: UNUserNotificationCenterDelegate Methods  -   ( void ) userNotificationCenter: ( UNUserNotificationCenter   * ) center   willPresentNotification: ( UNNotification   * ) notification   withCompletionHandler: ( void   ( ^ )( UNNotificationPresentationOptions   options )) completionHandler  { \n     [ Tango   userNotificationCenter : center   willPresent : notification   withCompletionHandler : completionHandler ];  }  -   ( void ) userNotificationCenter: ( UNUserNotificationCenter   * ) center   didReceiveNotificationResponse: ( UNNotificationResponse   * ) response   withCompletionHandler: ( void ( ^ )( void )) completionHandler  { \n     [ Tango   userNotificationCenter : center   didReceive : response   withCompletionHandler : completionHandler ];  }  \n\n         \n    \n         \n    \n                 \n                       Location tracking  If you are going to use a location campaign you need to add in your  plist  the following key:  NSLocationAlwaysUsageDescription .", 
            "title": "Tango framework"
        }, 
        {
            "location": "/developer-guide/ios/push-notifications-setup/", 
            "text": "Reminder\n\n\nIn order to use push notifications in your iOS app, a membership for the \niOS Developer Program\n is required. Be sure to be logged in XCode with your developer account, before proceeding.\n\n\n\n\nApp capabilities\n\n\nPush notifications require some specific capabilities enabled. Select the target\ns Capabilities pane in XCode and enable \nPush notifications\n and \nBackground Modes/Remote notifications capabilities\n:\n\n\n\n\nAfter enabling these two capabilities, build \n run your app. Check your app output in the Debug area and wait until Tango finishes initialisation. This process will sync your app with Tango, which will make it easier for you in the following steps.\n\n\nAPNs Setup\n\n\nApple Push Notification service (APNs) is the centerpiece of the remote notifications feature and requires some special certificates that you can generate in the \nApple Developer Members Center\n. Once there, click on App IDs from Identifiers section, then follow the steps provided below.\n\n\n\n\n\n\nSelect your app id. If you don't have an app id created select +  button and fill out the form, be sure you check Push Notification checkbox.\n\n\nExpand your app by selecting your app id and you will see a field named Push Notifications with yellow or green status icons for development or distribution: \n\n\nClick edit button, go to Push Notifications section and press the button \nCreate Certificate...\n for distribution or development.\n Follow the instructions to create a Certificate Signing Request (CSR) file from your Mac. When you're done, press \nContinue\n.\n\n\nUpload the CSR and after that press download to get the Certificate.\n\n\nOpen the certificate. Opening the certificate will open Keychain Access.\n\n\nSelect your certificate from  Keychain Access in My Certificates section. If the certificate is not here try in Certificate section. Right click on it and then Export \"Apple iOS Development/Distribution Push Service: your_app_bundle\".\nThis command will export the certificate in a .p12 file with a password.\n\n\n\n\nAdd Certificate to Tango\n\n\nAfter generating the Push Notification certificate, navigate to the \napps page\n and create a new iOS app:\n\n\n\n\n\n\nApp synced with Tango\n\n\nIf you already ran your app while having Tango SDK set up, you would find it listed in the Tango console's apps page. In this case, just click on the app icon and follow along.\n\n\n\n\nContinue by fill the form with your app data:\n\n\n\n\ninsert app bundle id\n\n\ninsert app name\n\n\ndrag and drop the .p12 files from previous step\n\n\n\n\n\n\nImport app information from the AppStore\n\n\nIf your app is already published in the Apple AppStore, you can fetch the name and icon by pressing the \nImport app information from AppStore\n button after entering the bundleId.\n\n\n\n\n\n\nPlease continue reading the \nTango Rich Notifications Setup\n chapter, in order to finish integrating Tango SDK into your app.\n\n\nTest\n\n\nAt this point you should be ready to go. To test if the installation succeeded you should enter the Tango Targeting account then create and activate some campaigns. The easiest way is to create a real-time campaign but it pays off to test all campaigns as some of them have specific needs(like location permissions).\n\n\nIf a campaign doesn't trigger it is possible it did not reach the device yet as the synchronization is triggered approximately every ten minutes. To go around this, you could simply restart the application and a synchronization will immediately trigger. Note that real-time campaigns don't need any synchronization to work.", 
            "title": "Push notifications setup"
        }, 
        {
            "location": "/developer-guide/ios/push-notifications-setup/#app-capabilities", 
            "text": "Push notifications require some specific capabilities enabled. Select the target s Capabilities pane in XCode and enable  Push notifications  and  Background Modes/Remote notifications capabilities :   After enabling these two capabilities, build   run your app. Check your app output in the Debug area and wait until Tango finishes initialisation. This process will sync your app with Tango, which will make it easier for you in the following steps.", 
            "title": "App capabilities"
        }, 
        {
            "location": "/developer-guide/ios/push-notifications-setup/#apns-setup", 
            "text": "Apple Push Notification service (APNs) is the centerpiece of the remote notifications feature and requires some special certificates that you can generate in the  Apple Developer Members Center . Once there, click on App IDs from Identifiers section, then follow the steps provided below.    Select your app id. If you don't have an app id created select +  button and fill out the form, be sure you check Push Notification checkbox.  Expand your app by selecting your app id and you will see a field named Push Notifications with yellow or green status icons for development or distribution:   Click edit button, go to Push Notifications section and press the button  Create Certificate...  for distribution or development.  Follow the instructions to create a Certificate Signing Request (CSR) file from your Mac. When you're done, press  Continue .  Upload the CSR and after that press download to get the Certificate.  Open the certificate. Opening the certificate will open Keychain Access.  Select your certificate from  Keychain Access in My Certificates section. If the certificate is not here try in Certificate section. Right click on it and then Export \"Apple iOS Development/Distribution Push Service: your_app_bundle\".\nThis command will export the certificate in a .p12 file with a password.", 
            "title": "APNs Setup"
        }, 
        {
            "location": "/developer-guide/ios/push-notifications-setup/#add-certificate-to-tango", 
            "text": "After generating the Push Notification certificate, navigate to the  apps page  and create a new iOS app:    App synced with Tango  If you already ran your app while having Tango SDK set up, you would find it listed in the Tango console's apps page. In this case, just click on the app icon and follow along.   Continue by fill the form with your app data:   insert app bundle id  insert app name  drag and drop the .p12 files from previous step    Import app information from the AppStore  If your app is already published in the Apple AppStore, you can fetch the name and icon by pressing the  Import app information from AppStore  button after entering the bundleId.    Please continue reading the  Tango Rich Notifications Setup  chapter, in order to finish integrating Tango SDK into your app.", 
            "title": "Add Certificate to Tango"
        }, 
        {
            "location": "/developer-guide/ios/push-notifications-setup/#test", 
            "text": "At this point you should be ready to go. To test if the installation succeeded you should enter the Tango Targeting account then create and activate some campaigns. The easiest way is to create a real-time campaign but it pays off to test all campaigns as some of them have specific needs(like location permissions).  If a campaign doesn't trigger it is possible it did not reach the device yet as the synchronization is triggered approximately every ten minutes. To go around this, you could simply restart the application and a synchronization will immediately trigger. Note that real-time campaigns don't need any synchronization to work.", 
            "title": "Test"
        }, 
        {
            "location": "/developer-guide/ios/tango-rich-notifications-setup/", 
            "text": "iOS 10 Rich Notifications\n\n\niOS 10 introduced a new awesome new notifications, with images or gifs, and Tango Rich Notification SDK supports them fully. If you wish to use this functionality you will need to create a \nnotification service extension\n.\n\n\nCreate a new iOS target in Xcode (File -\n New -\n Target) and select the Notification Service Extension type\n\n\n\n\nYou can add the Tango Rich Notifications framework to your extension, by adding the following lines to your podspec:\n\n\ntarget \nNotificationServiceExtesion-Target-Name\n do\n  use_frameworks!\n  pod \nTangoRichNotification\n, \n~\n 1.0.14\n\nend\n\n\n\n\n\n\n\nDon't forget to replace the \nNotificationServiceExtesion-Target-Name\n in the code snippet above.\n\n\n\n\nAfter saving the Podfile run the following command in a Terminal window:\n\n\n$ pod install\n\n\n\n\n\nTango Rich Notification framework\n\n\nNavigate into your notification service extension folder, open the \nNotificationService\n class and add the following import:\n\n\n\n                \n\n                    \n        \n\n            \n        \n\n            \nSwift\n\n        \n\n    \n        \n\n            \nObjective-C\n\n        \n\n    \n        \n\n    \n        \n\n            \n        \n\n            \nimport\n \nTangoRichNotification\n\n\n\n\n        \n\n    \n        \n\n            \n#import \nUserNotifications/UserNotifications.h\n\n\n#import \nTangoRichNotification/TangoRichNotification-Swift.h\n\n\n#import \nTangoRichNotification/TangoRichNotification.h\n\n\n\n\n        \n\n    \n        \n\n    \n                \n\n                    \n\n\nThen, in the \ndidReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent)\n method replace the following code:\n\n\n\n                \n\n                    \n        \n\n            \n        \n\n            \nSwift\n\n        \n\n    \n        \n\n            \nObjective-C\n\n        \n\n    \n        \n\n    \n        \n\n            \n        \n\n            \nif\n \nlet\n \nbestAttemptContent\n \n=\n \nbestAttemptContent\n \n{\n\n    \n// Modify the notification content here...\n\n    \nbestAttemptContent\n.\ntitle\n \n=\n \n\\(\nbestAttemptContent\n.\ntitle\n)\n [modified]\n\n    \ncontentHandler\n(\nbestAttemptContent\n)\n\n\n}\n\n\n\n\n        \n\n    \n        \n\n            \n// Modify the notification content here...\n\n\nself\n.\nbestAttemptContent\n.\ntitle\n \n=\n \n[\nNSString\n \nstringWithFormat\n:\n@\n%@ [modified]\n,\n \nself\n.\nbestAttemptContent\n.\ntitle\n];\n\n\n\nself\n.\ncontentHandler\n(\nself\n.\nbestAttemptContent\n);\n\n\n\n\n        \n\n    \n        \n\n    \n                \n\n                    \n\n\nwith:\n\n\n\n                \n\n                    \n        \n\n            \n        \n\n            \nSwift\n\n        \n\n    \n        \n\n            \nObjective-C\n\n        \n\n    \n        \n\n    \n        \n\n            \n        \n\n            \nif\n \nlet\n \nbestAttemptContent\n \n=\n \nbestAttemptContent\n \n{\n\n    \nTangoRichNotification\n.\nsetupRichContent\n(\ncontent\n:\n \nbestAttemptContent\n,\n  \napiKey\n:\n \nyour-tango-sdk-key\n,\n \ncompletionHandler\n:\n \n{\n \n(\ncontent\n)\n \nin\n \ncontentHandler\n(\ncontent\n)})\n\n\n}\n\n\n\n\n        \n\n    \n        \n\n            \n[\nTangoRichNotification\n \nsetupRichContentWithContent\n:\nself\n.\nbestAttemptContent\n \napiKey\n:\n@\nyour-tango-sdk-key\n \ncompletionHandler\n:\nself\n.\ncontentHandler\n];", 
            "title": "Tango Rich Notifications setup"
        }, 
        {
            "location": "/developer-guide/ios/tango-rich-notifications-setup/#ios-10-rich-notifications", 
            "text": "iOS 10 introduced a new awesome new notifications, with images or gifs, and Tango Rich Notification SDK supports them fully. If you wish to use this functionality you will need to create a  notification service extension .  Create a new iOS target in Xcode (File -  New -  Target) and select the Notification Service Extension type   You can add the Tango Rich Notifications framework to your extension, by adding the following lines to your podspec:  target  NotificationServiceExtesion-Target-Name  do\n  use_frameworks!\n  pod  TangoRichNotification ,  ~  1.0.14 \nend   Don't forget to replace the  NotificationServiceExtesion-Target-Name  in the code snippet above.   After saving the Podfile run the following command in a Terminal window:  $ pod install", 
            "title": "iOS 10 Rich Notifications"
        }, 
        {
            "location": "/developer-guide/ios/tango-rich-notifications-setup/#tango-rich-notification-framework", 
            "text": "Navigate into your notification service extension folder, open the  NotificationService  class and add the following import:  \n                 \n                    \n         \n            \n         \n             Swift \n         \n    \n         \n             Objective-C \n         \n    \n         \n    \n         \n            \n         \n             import   TangoRichNotification  \n\n         \n    \n         \n             #import  UserNotifications/UserNotifications.h  #import  TangoRichNotification/TangoRichNotification-Swift.h  #import  TangoRichNotification/TangoRichNotification.h  \n\n         \n    \n         \n    \n                 \n                      Then, in the  didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent)  method replace the following code:  \n                 \n                    \n         \n            \n         \n             Swift \n         \n    \n         \n             Objective-C \n         \n    \n         \n    \n         \n            \n         \n             if   let   bestAttemptContent   =   bestAttemptContent   { \n     // Modify the notification content here... \n     bestAttemptContent . title   =   \\( bestAttemptContent . title )  [modified] \n     contentHandler ( bestAttemptContent )  }  \n\n         \n    \n         \n             // Modify the notification content here...  self . bestAttemptContent . title   =   [ NSString   stringWithFormat : @ %@ [modified] ,   self . bestAttemptContent . title ];  self . contentHandler ( self . bestAttemptContent );  \n\n         \n    \n         \n    \n                 \n                      with:  \n                 \n                    \n         \n            \n         \n             Swift \n         \n    \n         \n             Objective-C \n         \n    \n         \n    \n         \n            \n         \n             if   let   bestAttemptContent   =   bestAttemptContent   { \n     TangoRichNotification . setupRichContent ( content :   bestAttemptContent ,    apiKey :   your-tango-sdk-key ,   completionHandler :   {   ( content )   in   contentHandler ( content )})  }  \n\n         \n    \n         \n             [ TangoRichNotification   setupRichContentWithContent : self . bestAttemptContent   apiKey : @ your-tango-sdk-key   completionHandler : self . contentHandler ];", 
            "title": "Tango Rich Notification framework"
        }, 
        {
            "location": "/developer-guide/ios/handle-custom-actions/", 
            "text": "Work in progress", 
            "title": "Handle custom actions"
        }, 
        {
            "location": "/developer-guide/ios/trigger-automated-campaigns/", 
            "text": "Triggering an automated campaign with Tango Targeting SDK is straightforward. All you have to do is to use the trigger associated with the campaign and make the call below wherever you think is appropriate in your code.\n\n\n\n                \n\n                    \n        \n\n            \n        \n\n            \nSwift\n\n        \n\n    \n        \n\n            \nObjective-C\n\n        \n\n    \n        \n\n    \n        \n\n            \n        \n\n            \nTango\n.\ntriggerWithKey\n(\ntrigger\n:\n \nyour-campaign-trigger\n);\n\n\n\n\n        \n\n    \n        \n\n            \n[\nTango\n \ntriggerWithKey\n:\n@\nyour-campaign-trigger\n];", 
            "title": "Trigger automated campaigns"
        }, 
        {
            "location": "/developer-guide/ios/manage-tags/", 
            "text": "Tags are a useful way to target specific users. Every device that has an associated tag (segment) will receive campaigns that are also associated with that tag.\n\n\nTo add new segments to an iOS device use the following line:\n\n\n\n                \n\n                    \n        \n\n            \n        \n\n            \nSwift\n\n        \n\n    \n        \n\n            \nObjective-C\n\n        \n\n    \n        \n\n    \n        \n\n            \n        \n\n            \n  \nTango\n.\nregisterSegments\n(\nsegments\n:\n \n[\nfirstSegment\n,\n \nsecondSegment\n])\n\n\n\n\n        \n\n    \n        \n\n            \n[\nTango\n \nregisterSegmentsWithSegments\n:\n \n@[\n@\nfirst-segment\n,\n \n@\nsecond-segment\n]\n];\n\n\n\n\n        \n\n    \n        \n\n    \n                \n\n                    \n\n\n\n\nNote\n\n\nSegments can be associated with the device externally as well. Those tags will not be accessible on the device.", 
            "title": "Manage tags"
        }, 
        {
            "location": "/developer-guide/ios/troubleshooting/", 
            "text": "Unsupported SWIFT_VERSION value\n\n\nWhen using Objective-C projects and Cocoapods 1.3.1, some Swift pods might have an undefined \nSWIFT_VERSION\n, which would prevent your project from building because of the following error:\n\n\n\n\nThe \nSwift Language Version\n (SWIFT_VERSION) build setting must be set to a supported value for targets which use Swift. This setting can be set in the build settings editor.\n\n\n\n\nIn order to fix this problem, add the following script to your Podfile and run \npod install\n:\n\n\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    if [\nAlamofire\n].include? target.name\n      target.build_configurations.each do |config|\n          config.build_settings[\nSWIFT_VERSION\n] = \n4.0\n\n      end\n    end\n  end\nend\n\n\n\n\n\n\n\nNote\n\n\nIn Tango's case, our only dependency, Alamofire, needs to have it's SWIFT_VERSION version set to 4.0.\n\n\n\n\nRich Push Notification image not showing\n\n\nIf you find that Tango rich notifications don't work on your project, please follow these steps:\n\n\n\n\nDouble check your Tango SDK implementation.\n\n\nMake sure that the \nDeployment Target\n of your NotificationServiceExtension is the same as your project's.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/developer-guide/ios/troubleshooting/#unsupported-swift_version-value", 
            "text": "When using Objective-C projects and Cocoapods 1.3.1, some Swift pods might have an undefined  SWIFT_VERSION , which would prevent your project from building because of the following error:   The  Swift Language Version  (SWIFT_VERSION) build setting must be set to a supported value for targets which use Swift. This setting can be set in the build settings editor.   In order to fix this problem, add the following script to your Podfile and run  pod install :  post_install do |installer|\n  installer.pods_project.targets.each do |target|\n    if [ Alamofire ].include? target.name\n      target.build_configurations.each do |config|\n          config.build_settings[ SWIFT_VERSION ] =  4.0 \n      end\n    end\n  end\nend   Note  In Tango's case, our only dependency, Alamofire, needs to have it's SWIFT_VERSION version set to 4.0.", 
            "title": "Unsupported SWIFT_VERSION value"
        }, 
        {
            "location": "/developer-guide/ios/troubleshooting/#rich-push-notification-image-not-showing", 
            "text": "If you find that Tango rich notifications don't work on your project, please follow these steps:   Double check your Tango SDK implementation.  Make sure that the  Deployment Target  of your NotificationServiceExtension is the same as your project's.", 
            "title": "Rich Push Notification image not showing"
        }, 
        {
            "location": "/developer-guide/cordova/overview/", 
            "text": "Cordova Plugin Overview\n\n\nDownload\n\n\nThere are three ways you can add \ncordova-plugin-tango\n to your Cordova project:\n\n\nvia \nconfig.xml\n dependency\n\n\nplugin\n \nname=\ncordova-plugin-tango\n \nspec=\nspecify-version\n \n/\n\n\n\n\n\n\nfrom npmjs\n\n\nNavigate to your project and run the following line:\n\n\ncordova plugin add cordova-plugin-tango\n\n\n\n\n\nfrom Git\n\n\nNavigate to your project and run:\n\n\ncordova plugin add https://github.com/tangotargeting/cordova-plugin-tango.git\n\n\n\n\n\nInstallation\n\n\n\n\nAndroid\n\n\niOS\n\n\n\n\nUsage\n\n\nPrepare the SDK\n\n\nIn order to use it correctly, Tango Targeting SDK should be initialized as soon as possible when your Cordova App launches. In your project's \nindex.js\n add the following line at the top of your \nonDeviceReady\n method.\n\n\nwindow\n.\nTangoPlugin\n.\ninitialize\n(\nyour-tango-sdk-key\n);\n\n\n\n\n\n\nThis will register the device on TangoTargeting and prepare it for consuming campaigns.\n\n\n\n\nImportant\n\n\nTo find your Tango API KEY \nGo to Console \n and locate the card \nTango SDK Key\n\n\n\nthen hover it and click the copy icon on the right.\n\n\n\n\n\n\n\nNote\n\n\nExplicitly initializing Tango is only needed for iOS. On Android the SDK auto-initializez, provided it can find the API Key in the manifest file. See \nAndroid Installation\n.\n\n\n\n\nTrigger an Automated Campaign\n\n\nAutomated campaigns can be triggered using the following method call:\n\n\nwindow\n.\nTangoPlugin\n.\ntrigger\n(\nyour-automated-campaign-trigger\n);\n\n\n\n\n\n\nYou can find the campaign trigger string by clicking on the campaign in your Tango Console.\n\n\nHandle custom actions\n\n\nHandling a custom action is as easy as extending \nTangoPlugin\n with the following method:\n\n\nwindow\n.\nTangoPlugin\n.\nonCustomAction\n \n=\n \nfunction\n(\naction\n){\n\n    \n// identify the action and do stuff\n\n\n};\n\n\n\n\n\n\nManage tags\n\n\nYou can add segments to a device to allow it to widen the pool of campaigns it can receive with the following method:\n\n\nwindow\n.\nTangoPlugin\n.\naddSegments\n([\nfirst-segment\n,\n \nsecond-segment\n]);\n\n\n\n\n\n\nTroubleshooting\n\n\n\n\n\n\nIf you completed the integration but don't receive any campaign, make sure you use the the API Key (see above how to find your API Key) and \nNOT\n the Public API Key.\n\n\n\n\n\n\nSometimes, depending on the version of your Cordova Framework version or Cordova wrappers like Ionic or Phonegap, the configurations in \nconfig.xml\n may not be applied to the platforms/android/AndroidManifest.xml. To fix this you can use the \ncordova-custom-config\n plugin which will make sure the configurations will pe applied to their respective platforms.", 
            "title": "Overview"
        }, 
        {
            "location": "/developer-guide/cordova/overview/#cordova-plugin-overview", 
            "text": "", 
            "title": "Cordova Plugin Overview"
        }, 
        {
            "location": "/developer-guide/cordova/overview/#download", 
            "text": "There are three ways you can add  cordova-plugin-tango  to your Cordova project:", 
            "title": "Download"
        }, 
        {
            "location": "/developer-guide/cordova/overview/#via-configxml-dependency", 
            "text": "plugin   name= cordova-plugin-tango   spec= specify-version   /", 
            "title": "via config.xml dependency"
        }, 
        {
            "location": "/developer-guide/cordova/overview/#from-npmjs", 
            "text": "Navigate to your project and run the following line:  cordova plugin add cordova-plugin-tango", 
            "title": "from npmjs"
        }, 
        {
            "location": "/developer-guide/cordova/overview/#from-git", 
            "text": "Navigate to your project and run:  cordova plugin add https://github.com/tangotargeting/cordova-plugin-tango.git", 
            "title": "from Git"
        }, 
        {
            "location": "/developer-guide/cordova/overview/#installation", 
            "text": "Android  iOS", 
            "title": "Installation"
        }, 
        {
            "location": "/developer-guide/cordova/overview/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/developer-guide/cordova/overview/#prepare-the-sdk", 
            "text": "In order to use it correctly, Tango Targeting SDK should be initialized as soon as possible when your Cordova App launches. In your project's  index.js  add the following line at the top of your  onDeviceReady  method.  window . TangoPlugin . initialize ( your-tango-sdk-key );   This will register the device on TangoTargeting and prepare it for consuming campaigns.   Important  To find your Tango API KEY  Go to Console   and locate the card  Tango SDK Key  \nthen hover it and click the copy icon on the right.    Note  Explicitly initializing Tango is only needed for iOS. On Android the SDK auto-initializez, provided it can find the API Key in the manifest file. See  Android Installation .", 
            "title": "Prepare the SDK"
        }, 
        {
            "location": "/developer-guide/cordova/overview/#trigger-an-automated-campaign", 
            "text": "Automated campaigns can be triggered using the following method call:  window . TangoPlugin . trigger ( your-automated-campaign-trigger );   You can find the campaign trigger string by clicking on the campaign in your Tango Console.", 
            "title": "Trigger an Automated Campaign"
        }, 
        {
            "location": "/developer-guide/cordova/overview/#handle-custom-actions", 
            "text": "Handling a custom action is as easy as extending  TangoPlugin  with the following method:  window . TangoPlugin . onCustomAction   =   function ( action ){ \n     // identify the action and do stuff  };", 
            "title": "Handle custom actions"
        }, 
        {
            "location": "/developer-guide/cordova/overview/#manage-tags", 
            "text": "You can add segments to a device to allow it to widen the pool of campaigns it can receive with the following method:  window . TangoPlugin . addSegments ([ first-segment ,   second-segment ]);", 
            "title": "Manage tags"
        }, 
        {
            "location": "/developer-guide/cordova/overview/#troubleshooting", 
            "text": "If you completed the integration but don't receive any campaign, make sure you use the the API Key (see above how to find your API Key) and  NOT  the Public API Key.    Sometimes, depending on the version of your Cordova Framework version or Cordova wrappers like Ionic or Phonegap, the configurations in  config.xml  may not be applied to the platforms/android/AndroidManifest.xml. To fix this you can use the  cordova-custom-config  plugin which will make sure the configurations will pe applied to their respective platforms.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/developer-guide/cordova/android/", 
            "text": "Cordova Android installation\n\n\nAdd the SDK Key\n\n\nTango Targeting SDK auto-initializez on Android. However, it needs to read your Tango SDK Key from AndroidManifest.xml file. In your \nconfig.xml\n add the SDK Key to the android platform in the following manner:\n\n\nplatform\n \nname=\nandroid\n\n  \n!-- other configurations above --\n\n  \nconfig-file\n \nparent=\n./application\n \ntarget=\nAndroidManifest.xml\n\n    \nmeta-data\n \nandroid:name=\ntango_api_key\n \nandroid:value=\nyour-tango-sdk-key\n \n/\n\n  \n/config-file\n\n  \n!-- other configurations below --\n\n\n/platform\n\n\n\n\n\n\n\n\nImportant\n\n\nTo find your Tango API KEY \nGo to Console \n and locate the card \nTango SDK Key\n\n\n\nthen hover it and click the copy icon on the right.\n\n\n\n\n\nEnable Tango logs\n\n\nIf you want to see Tango logs add a \ntango_debug_mode\n \nmeta-data\n set to \ntrue\n to your android platform.\n\n\nmeta-data\n \nandroid:name=\ntango_debug_mode\n \nandroid:value=\ntrue\n \n/\n\n\n\n\n\n\nEnable Push Notifications\n\n\nTango Targeting uses FCM for push notifications. For this you will need a \nFirebase\n account. After successfully creating the account follow these steps.\n\n\n\n\nGo to \nFirebase Console\n;\n\n\nAdd a new project;\n\n\nWhen the project is created, click on \nAdd Firebase to your Android app\n. A pop-up window will appear with 3 steps;\n\n\nIn the first step your android package name is required. This can be found in your project's \nconfig.xml\n file. Look for \nwidget android-packageName=\ncom.yourapp.android\n /\n if \nandroid-packageName\n is missing, use the \nid\n attribute;\n\n\nClick \nRegister app\n. It will take you to step 2;\n\n\nDownload the file \ngoogle-services.json\n and copy it in the root folder of your cordova project;\n\n\nClose the pop-up window;\n\n\nOpen a Terminal window and navigate to your cordova project root folder;\n\n\nRun \ncordova build android\n;\n\n\n\n\nTo finalize the process, copy the FCM \nServer key\n and \nSender Id\n from here:\n\n\n\nThen go to \nTango Console -\n Apps\n and add them to your app.\n\n\n\n\nHit the \nUpdate\n button.\n\n\nNote:\n If you don't see your app yet, click \nNew app\n to add it. Use the same package name you used for FCM.\n\n\nAdd permissions\n\n\nTango SDK relies on the following permissions:\n\n\n!-- Runtime permissions--\n\n\nuses-permission\n \nandroid:name=\nandroid.permission.READ_EXTERNAL_STORAGE\n/\n\n\nuses-permission\n \nandroid:name=\nandroid.permission.ACCESS_FINE_LOCATION\n/\n\n\n\n!--Normal permissions--\n\n\nuses-permission\n \nandroid:name=\ncom.android.browser.permission.READ_HISTORY_BOOKMARKS\n/\n\n\nuses-permission\n \nandroid:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission\n \nandroid:name=\nandroid.permission.RECEIVE_BOOT_COMPLETED\n/\n\n\n\n\n\n\nYou do not need to add these permissions to your Android Manifest file. However, if your \ntargetSdkVersion\n is higher than \n22\n you will need to request the \nandroid.permission.ACCESS_FINE_LOCATION\n and \nandroid.permission.READ_EXTERNAL_STORAGE\n permissions at runtime, whenever you think is most suitable for the user.\n\n\nThere are open-source libraries that can help you manage runtime permissions (for example \ncordova-plugin-android-permissions\n)\n\n\nYou are ready to go!\n\n\nAt this point you should be able to use Tango.\n\n\nTroubleshooting\n\n\n1. Firebase error/crash\n\n\nIf you get an error from firebase saying \ndefault FirebaseApp is not initialized in this process\n and tells you too initialize it with \nFirebaseApp.initializeApp(context)\n, please make sure the \ngoogle-services.json\n file is in the root folder of your Cordova project.\n\n\n2. Changing the android package name\n\n\nIf you decide to change the name of your android package, you should update the application in your Firebase Console.", 
            "title": "Android"
        }, 
        {
            "location": "/developer-guide/cordova/android/#cordova-android-installation", 
            "text": "", 
            "title": "Cordova Android installation"
        }, 
        {
            "location": "/developer-guide/cordova/android/#add-the-sdk-key", 
            "text": "Tango Targeting SDK auto-initializez on Android. However, it needs to read your Tango SDK Key from AndroidManifest.xml file. In your  config.xml  add the SDK Key to the android platform in the following manner:  platform   name= android \n   !-- other configurations above -- \n   config-file   parent= ./application   target= AndroidManifest.xml \n     meta-data   android:name= tango_api_key   android:value= your-tango-sdk-key   / \n   /config-file \n   !-- other configurations below --  /platform    Important  To find your Tango API KEY  Go to Console   and locate the card  Tango SDK Key  \nthen hover it and click the copy icon on the right.", 
            "title": "Add the SDK Key"
        }, 
        {
            "location": "/developer-guide/cordova/android/#enable-tango-logs", 
            "text": "If you want to see Tango logs add a  tango_debug_mode   meta-data  set to  true  to your android platform.  meta-data   android:name= tango_debug_mode   android:value= true   /", 
            "title": "Enable Tango logs"
        }, 
        {
            "location": "/developer-guide/cordova/android/#enable-push-notifications", 
            "text": "Tango Targeting uses FCM for push notifications. For this you will need a  Firebase  account. After successfully creating the account follow these steps.   Go to  Firebase Console ;  Add a new project;  When the project is created, click on  Add Firebase to your Android app . A pop-up window will appear with 3 steps;  In the first step your android package name is required. This can be found in your project's  config.xml  file. Look for  widget android-packageName= com.yourapp.android  /  if  android-packageName  is missing, use the  id  attribute;  Click  Register app . It will take you to step 2;  Download the file  google-services.json  and copy it in the root folder of your cordova project;  Close the pop-up window;  Open a Terminal window and navigate to your cordova project root folder;  Run  cordova build android ;   To finalize the process, copy the FCM  Server key  and  Sender Id  from here:  Then go to  Tango Console -  Apps  and add them to your app.   Hit the  Update  button.  Note:  If you don't see your app yet, click  New app  to add it. Use the same package name you used for FCM.", 
            "title": "Enable Push Notifications"
        }, 
        {
            "location": "/developer-guide/cordova/android/#add-permissions", 
            "text": "Tango SDK relies on the following permissions:  !-- Runtime permissions--  uses-permission   android:name= android.permission.READ_EXTERNAL_STORAGE /  uses-permission   android:name= android.permission.ACCESS_FINE_LOCATION /  !--Normal permissions--  uses-permission   android:name= com.android.browser.permission.READ_HISTORY_BOOKMARKS /  uses-permission   android:name= android.permission.INTERNET /  uses-permission   android:name= android.permission.RECEIVE_BOOT_COMPLETED /   You do not need to add these permissions to your Android Manifest file. However, if your  targetSdkVersion  is higher than  22  you will need to request the  android.permission.ACCESS_FINE_LOCATION  and  android.permission.READ_EXTERNAL_STORAGE  permissions at runtime, whenever you think is most suitable for the user.  There are open-source libraries that can help you manage runtime permissions (for example  cordova-plugin-android-permissions )", 
            "title": "Add permissions"
        }, 
        {
            "location": "/developer-guide/cordova/android/#you-are-ready-to-go", 
            "text": "At this point you should be able to use Tango.", 
            "title": "You are ready to go!"
        }, 
        {
            "location": "/developer-guide/cordova/android/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/developer-guide/cordova/android/#1-firebase-errorcrash", 
            "text": "If you get an error from firebase saying  default FirebaseApp is not initialized in this process  and tells you too initialize it with  FirebaseApp.initializeApp(context) , please make sure the  google-services.json  file is in the root folder of your Cordova project.", 
            "title": "1. Firebase error/crash"
        }, 
        {
            "location": "/developer-guide/cordova/android/#2-changing-the-android-package-name", 
            "text": "If you decide to change the name of your android package, you should update the application in your Firebase Console.", 
            "title": "2. Changing the android package name"
        }, 
        {
            "location": "/developer-guide/cordova/ios/", 
            "text": "Cordova iOS installation\n\n\nPrepare platform\n\n\n\n\nIf you don't have the iOS platform in your project, use the following line to add it:\n\n\n\n\ncordova platform add ios\n\n\n\n\n\n\n\nNavigate to \nyourCordovaProject/platforms/ios\n and open the \n.xcworkspace\n file with Xcode.\n\n\nSelect \nyourCordovaProject\n from Xcode Project Navigator. Then, select \nBuild Settings\n,\n    search for \nAlways Embed Swift Standard Libraries\n and set it to \nYES\n.\n\n\nYou also need to code sign your app, for that please follow \nthis guide\n.\n\n\nBuild and run.\n\n\n\n\nIntegrate Tango SDK\n\n\nPlease follow the \niOS project installation guide\n in order to complete your Tango iOS SDK integration.", 
            "title": "iOS"
        }, 
        {
            "location": "/developer-guide/cordova/ios/#cordova-ios-installation", 
            "text": "", 
            "title": "Cordova iOS installation"
        }, 
        {
            "location": "/developer-guide/cordova/ios/#prepare-platform", 
            "text": "If you don't have the iOS platform in your project, use the following line to add it:   cordova platform add ios   Navigate to  yourCordovaProject/platforms/ios  and open the  .xcworkspace  file with Xcode.  Select  yourCordovaProject  from Xcode Project Navigator. Then, select  Build Settings ,\n    search for  Always Embed Swift Standard Libraries  and set it to  YES .  You also need to code sign your app, for that please follow  this guide .  Build and run.", 
            "title": "Prepare platform"
        }, 
        {
            "location": "/developer-guide/cordova/ios/#integrate-tango-sdk", 
            "text": "Please follow the  iOS project installation guide  in order to complete your Tango iOS SDK integration.", 
            "title": "Integrate Tango SDK"
        }, 
        {
            "location": "/developer-guide/windows/overview/", 
            "text": "Important\n\n\nIn order to run Tango on your Windows desktop, please \nDownload and Install our Windows app\n.", 
            "title": "Windows"
        }, 
        {
            "location": "/samples/samples/", 
            "text": "All samples are available on GitHub.", 
            "title": "Android"
        }, 
        {
            "location": "/reference/", 
            "text": "Work in progress.", 
            "title": "Reference"
        }
    ]
}